explanations
===========
This module is intended as a way to decument return values, error messages,
or other outcomes of calling a procedure, function, or macro in an in-line
fashion. When writing good software it's crucial to properly document how it
works, but how we do it is often error prone and can cause more harm than
good. This module tries to fix one of the issues with providing good
documentation. Namely the disassociation with return values and error
messages from the documentation of them. Say you've created a nice little
function that can return three different return values. To document this
you've got a nice table in your documentation, a little something like this:

.. code-block::
   func ourSuperFunc(value: int): int =
     ## This procedure can return the following:
     ## ===  ===============================================
     ## 0    The value passed in was low (<100)
     ## 1    The value passed in was medium (>100, < 10_000)
     ## 2    The value passed in was high (>10_000)
     ## ===  ===============================================
     case value:
     of low(int)..100:
       return 0
     of 101..10_000:
       return 1
     else:
       return 2

This looks good, but there is a problem. What happens if we change one of
the ranges, but forget to update the documentation? Now the documentation is
lying to us about what the function does which is not good. This can happen
a lot, especially when multiple people are editing the same code, and
someone who wasn't aware of the table made a change. To alleviate this issue
this module implements an ``explained`` pragma, and an ``expl``
semi-template.

This file is automatically generated from the documentation found in
explanations.nim. Use ``nim doc explanations.nim`` to get the full documentation.
